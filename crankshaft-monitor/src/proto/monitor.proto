syntax = "proto3";

package crankshaft.monitor;

// MonitorService defines the gRPC services for real-time monitoring.
service Monitor {
  // SubscribeEvents streams all task events to connected clients.
  rpc SubscribeEvents(SubscribeEventsRequest) returns (stream Event) {}
  // GetServerState returns the server state.
  rpc GetServerState(GetServerStateRequest) returns (ServerStateResponse) {}
}

// GetServerStateRequest is a minimal request to get the server state.
message GetServerStateRequest {}

// ServerStateResponse represents the server state.
message ServerStateResponse {
  Resources resources = 1;
  map<string, EventType> tasks = 2;
}

// SubscribeEventsRequest is a minimal request to subscribe to all task events.
message SubscribeEventsRequest {}

// Event represents a monitoring event from a task.
message Event {
  string event_id = 1;
  EventType event_type = 2;
  int64 timestamp = 3;
  oneof payload {
    string message = 4;
    Resources resources = 6;
  }
}

// EventType defines the possible types of monitoring events.
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  TASK_QUEUED = 1;
  TASK_STARTED = 2;      // Task has started
  TASK_COMPLETED = 3;    // Task has completed successfully
  TASK_FAILED = 4;       // Task has failed
  TASK_STOPPED = 5;      // Task was stopped
  TASK_LOGS = 6;         // Log message from a task
  CONTAINER_STARTED = 7; // Container has started
  SERVICE_STARTED = 8;   // Service started
}

message Resources {
  double nodes = 1;
  double cpu = 2;
  double memory = 3;
  double max_cpu = 4;
  double max_memory = 5;
}
