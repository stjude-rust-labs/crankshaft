syntax = "proto3";

package crankshaft.monitor;

// MonitorService defines the gRPC services for real-time monitoring.
service Monitor {
  // SubscribeEvents streams all task events to connected clients.
  rpc SubscribeEvents(SubscribeEventsRequest) returns (stream Event) {}
}

// SubscribeEventsRequest is a minimal request to subscribe to all task events.
message SubscribeEventsRequest {}

// Event represents a monitoring event from a task.
message Event {
  string task_id = 1;
  EventType event_type = 2;
  int64 timestamp = 3;
  string message = 4; // description or log message
  map<string, string> metadata =
      5; // Additional key-value metadata (e.g., resource usage)
}

// EventType defines the possible types of monitoring events.
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  TASK_STARTED = 1;   // Task has started
  TASK_COMPLETED = 2; // Task has completed successfully
  TASK_FAILED = 3;    // Task has failed
  TASK_STOPPED = 4;   // Task was stopped
  TASK_LOGS = 5;      // Log message from a task
}
