// This file is @generated by prost-build.
/// GetServerStateRequest is a minimal request to get the server state.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetServerStateRequest {}
/// ServerStateResponse represents the server state.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerStateResponse {
    #[prost(message, optional, tag = "1")]
    pub resources: ::core::option::Option<Resources>,
    #[prost(map = "string, enumeration(EventType)", tag = "2")]
    pub tasks: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
}
/// SubscribeEventsRequest is a minimal request to subscribe to all task events.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubscribeEventsRequest {}
/// Event represents a monitoring event from a task.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Event {
    #[prost(string, tag = "1")]
    pub event_id: ::prost::alloc::string::String,
    #[prost(enumeration = "EventType", tag = "2")]
    pub event_type: i32,
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
    #[prost(oneof = "event::Payload", tags = "4, 6")]
    pub payload: ::core::option::Option<event::Payload>,
}
/// Nested message and enum types in `Event`.
pub mod event {
    #[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(string, tag = "4")]
        Message(::prost::alloc::string::String),
        #[prost(message, tag = "6")]
        Resources(super::Resources),
    }
}
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Resources {
    #[prost(double, tag = "1")]
    pub nodes: f64,
    #[prost(double, tag = "2")]
    pub cpu: f64,
    #[prost(double, tag = "3")]
    pub memory: f64,
    #[prost(double, tag = "4")]
    pub max_cpu: f64,
    #[prost(double, tag = "5")]
    pub max_memory: f64,
}
/// EventType defines the possible types of monitoring events.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EventType {
    Unspecified = 0,
    TaskQueued = 1,
    /// Task has started
    TaskStarted = 2,
    /// Task has completed successfully
    TaskCompleted = 3,
    /// Task has failed
    TaskFailed = 4,
    /// Task was stopped
    TaskStopped = 5,
    /// Log message from a task
    TaskLogs = 6,
    /// Container has started
    ContainerStarted = 7,
    /// Service started
    ServiceStarted = 8,
}
impl EventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "EVENT_TYPE_UNSPECIFIED",
            Self::TaskQueued => "TASK_QUEUED",
            Self::TaskStarted => "TASK_STARTED",
            Self::TaskCompleted => "TASK_COMPLETED",
            Self::TaskFailed => "TASK_FAILED",
            Self::TaskStopped => "TASK_STOPPED",
            Self::TaskLogs => "TASK_LOGS",
            Self::ContainerStarted => "CONTAINER_STARTED",
            Self::ServiceStarted => "SERVICE_STARTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "TASK_QUEUED" => Some(Self::TaskQueued),
            "TASK_STARTED" => Some(Self::TaskStarted),
            "TASK_COMPLETED" => Some(Self::TaskCompleted),
            "TASK_FAILED" => Some(Self::TaskFailed),
            "TASK_STOPPED" => Some(Self::TaskStopped),
            "TASK_LOGS" => Some(Self::TaskLogs),
            "CONTAINER_STARTED" => Some(Self::ContainerStarted),
            "SERVICE_STARTED" => Some(Self::ServiceStarted),
            _ => None,
        }
    }
}
/// Generated client implementations.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
pub mod monitor_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// MonitorService defines the gRPC services for real-time monitoring.
    #[derive(Debug, Clone)]
    pub struct MonitorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MonitorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MonitorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MonitorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MonitorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SubscribeEvents streams all task events to connected clients.
        pub async fn subscribe_events(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeEventsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Event>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/crankshaft.monitor.Monitor/SubscribeEvents",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("crankshaft.monitor.Monitor", "SubscribeEvents"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// GetServerState returns the server state.
        pub async fn get_server_state(
            &mut self,
            request: impl tonic::IntoRequest<super::GetServerStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ServerStateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/crankshaft.monitor.Monitor/GetServerState",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("crankshaft.monitor.Monitor", "GetServerState"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
pub mod monitor_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MonitorServer.
    #[async_trait]
    pub trait Monitor: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the SubscribeEvents method.
        type SubscribeEventsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::Event, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// SubscribeEvents streams all task events to connected clients.
        async fn subscribe_events(
            &self,
            request: tonic::Request<super::SubscribeEventsRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeEventsStream>,
            tonic::Status,
        >;
        /// GetServerState returns the server state.
        async fn get_server_state(
            &self,
            request: tonic::Request<super::GetServerStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ServerStateResponse>,
            tonic::Status,
        >;
    }
    /// MonitorService defines the gRPC services for real-time monitoring.
    #[derive(Debug)]
    pub struct MonitorServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MonitorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MonitorServer<T>
    where
        T: Monitor,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/crankshaft.monitor.Monitor/SubscribeEvents" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeEventsSvc<T: Monitor>(pub Arc<T>);
                    impl<
                        T: Monitor,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeEventsRequest,
                    > for SubscribeEventsSvc<T> {
                        type Response = super::Event;
                        type ResponseStream = T::SubscribeEventsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeEventsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Monitor>::subscribe_events(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribeEventsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/crankshaft.monitor.Monitor/GetServerState" => {
                    #[allow(non_camel_case_types)]
                    struct GetServerStateSvc<T: Monitor>(pub Arc<T>);
                    impl<
                        T: Monitor,
                    > tonic::server::UnaryService<super::GetServerStateRequest>
                    for GetServerStateSvc<T> {
                        type Response = super::ServerStateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetServerStateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Monitor>::get_server_state(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetServerStateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MonitorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "crankshaft.monitor.Monitor";
    impl<T> tonic::server::NamedService for MonitorServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
