// This file is @generated by prost-build.
/// The request for cancelling a task
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CancelTaskRequest {
    #[prost(uint64, tag = "1")]
    pub id: u64,
}
/// The response of task cancel event
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CancelTaskResponse {}
/// The request for retrieving the current service state.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ServiceStateRequest {}
/// The response containing the current service state.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceStateResponse {
    /// The current set of tasks.
    #[prost(map = "uint64, message", tag = "1")]
    pub tasks: ::std::collections::HashMap<u64, TaskEvents>,
}
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskEvents {
    #[prost(message, repeated, tag = "1")]
    pub events: ::prost::alloc::vec::Vec<Event>,
}
/// The request for subscribing to the task events stream.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SubscribeEventsRequest {}
/// Represents a Crankshaft event.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Event {
    /// The timestamp of the event.
    #[prost(message, optional, tag = "1")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(oneof = "event::EventKind", tags = "2, 3, 4, 5, 6, 7, 8, 9, 10, 11")]
    pub event_kind: ::core::option::Option<event::EventKind>,
}
/// Nested message and enum types in `Event`.
pub mod event {
    #[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EventKind {
        /// The task created event.
        #[prost(message, tag = "2")]
        Created(super::TaskCreatedEvent),
        /// The task started event.
        #[prost(message, tag = "3")]
        Started(super::TaskStartedEvent),
        /// The task container created event.
        #[prost(message, tag = "4")]
        ContainerCreated(super::TaskContainerCreatedEvent),
        /// The task container exited event.
        #[prost(message, tag = "5")]
        ContainerExited(super::TaskContainerExitedEvent),
        /// The task completed event.
        #[prost(message, tag = "6")]
        Completed(super::TaskCompletedEvent),
        /// The task failed event.
        #[prost(message, tag = "7")]
        Failed(super::TaskFailedEvent),
        /// The task canceled event.
        #[prost(message, tag = "8")]
        Canceled(super::TaskCanceledEvent),
        /// The task preempted event.
        #[prost(message, tag = "9")]
        Preempted(super::TaskPreemptedEvent),
        /// The task stdout event.
        #[prost(message, tag = "10")]
        Stdout(super::TaskStdoutEvent),
        /// The task stderr event.
        #[prost(message, tag = "11")]
        Stderr(super::TaskStderrEvent),
    }
}
/// Represents an exit status.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ExitStatus {
    #[prost(oneof = "exit_status::ExitStatusKind", tags = "1, 2")]
    pub exit_status_kind: ::core::option::Option<exit_status::ExitStatusKind>,
}
/// Nested message and enum types in `ExitStatus`.
pub mod exit_status {
    #[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum ExitStatusKind {
        /// The exit was from an exit code.
        #[prost(int32, tag = "1")]
        Code(i32),
        /// The exit was from a signal.
        /// Note: this field is only specified on Unix when the process exited with a signal.
        #[prost(int32, tag = "2")]
        Signal(i32),
    }
}
/// Represents a task created event.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskCreatedEvent {
    /// The id of the task.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// The name of the task.
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// The TES identifier of the task.
    /// Note: this field is only sent for the TES backend.
    #[prost(string, optional, tag = "3")]
    pub tes_id: ::core::option::Option<::prost::alloc::string::String>,
}
/// Represents a task started event.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskStartedEvent {
    /// The id of the task.
    #[prost(uint64, tag = "1")]
    pub id: u64,
}
/// Represents a task container created event.
/// Note: this event is only sent for the Docker backend.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskContainerCreatedEvent {
    /// The id of the task.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// The id of the container that was created.
    #[prost(string, tag = "2")]
    pub container: ::prost::alloc::string::String,
}
/// Represents a task container exited event.
/// Note: this event is only sent for the Docker backend.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskContainerExitedEvent {
    /// The id of the task.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// The id of the container that exited.
    #[prost(string, tag = "2")]
    pub container: ::prost::alloc::string::String,
    /// The exit status of the container.
    #[prost(message, optional, tag = "3")]
    pub exit_status: ::core::option::Option<ExitStatus>,
}
/// Represents a task completed event.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskCompletedEvent {
    /// The id of the task.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// The exit statuses for each execution of the task.
    #[prost(message, repeated, tag = "2")]
    pub exit_statuses: ::prost::alloc::vec::Vec<ExitStatus>,
}
/// Represents a task failed event.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskFailedEvent {
    /// The id of the task.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// The error message.
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Represents a task canceled event.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskCanceledEvent {
    /// The id of the task.
    #[prost(uint64, tag = "1")]
    pub id: u64,
}
/// Represents a task preempted event.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskPreemptedEvent {
    /// The id of the task.
    #[prost(uint64, tag = "1")]
    pub id: u64,
}
/// Represents a task stdout event.
/// Note: this event is only sent for the Docker backend.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskStdoutEvent {
    /// The id of the task.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// The stdout message.
    #[prost(bytes = "vec", tag = "2")]
    pub message: ::prost::alloc::vec::Vec<u8>,
}
/// Represents a task stderr event.
/// Note: this event is only sent for the Docker backend.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskStderrEvent {
    /// The id of the task.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// The stderr message.
    #[prost(bytes = "vec", tag = "2")]
    pub message: ::prost::alloc::vec::Vec<u8>,
}
/// Generated client implementations.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
pub mod monitor_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// The monitor service implements real-time monitoring of Crankshaft events.
    #[derive(Debug, Clone)]
    pub struct MonitorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MonitorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MonitorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MonitorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MonitorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Subscribes to the Crankshaft event stream.
        pub async fn subscribe_events(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeEventsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Event>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/crankshaft.monitor.Monitor/SubscribeEvents",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("crankshaft.monitor.Monitor", "SubscribeEvents"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Gets the current service state.
        pub async fn get_service_state(
            &mut self,
            request: impl tonic::IntoRequest<super::ServiceStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ServiceStateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/crankshaft.monitor.Monitor/GetServiceState",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("crankshaft.monitor.Monitor", "GetServiceState"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Cancels a task
        pub async fn cancel_task(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelTaskResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/crankshaft.monitor.Monitor/CancelTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("crankshaft.monitor.Monitor", "CancelTask"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[allow(clippy::all, missing_docs, clippy::missing_docs_in_private_items)]
pub mod monitor_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MonitorServer.
    #[async_trait]
    pub trait Monitor: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the SubscribeEvents method.
        type SubscribeEventsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::Event, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Subscribes to the Crankshaft event stream.
        async fn subscribe_events(
            &self,
            request: tonic::Request<super::SubscribeEventsRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeEventsStream>,
            tonic::Status,
        >;
        /// Gets the current service state.
        async fn get_service_state(
            &self,
            request: tonic::Request<super::ServiceStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ServiceStateResponse>,
            tonic::Status,
        >;
        /// Cancels a task
        async fn cancel_task(
            &self,
            request: tonic::Request<super::CancelTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelTaskResponse>,
            tonic::Status,
        >;
    }
    /// The monitor service implements real-time monitoring of Crankshaft events.
    #[derive(Debug)]
    pub struct MonitorServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MonitorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MonitorServer<T>
    where
        T: Monitor,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/crankshaft.monitor.Monitor/SubscribeEvents" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeEventsSvc<T: Monitor>(pub Arc<T>);
                    impl<
                        T: Monitor,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeEventsRequest,
                    > for SubscribeEventsSvc<T> {
                        type Response = super::Event;
                        type ResponseStream = T::SubscribeEventsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeEventsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Monitor>::subscribe_events(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribeEventsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/crankshaft.monitor.Monitor/GetServiceState" => {
                    #[allow(non_camel_case_types)]
                    struct GetServiceStateSvc<T: Monitor>(pub Arc<T>);
                    impl<
                        T: Monitor,
                    > tonic::server::UnaryService<super::ServiceStateRequest>
                    for GetServiceStateSvc<T> {
                        type Response = super::ServiceStateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ServiceStateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Monitor>::get_service_state(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetServiceStateSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/crankshaft.monitor.Monitor/CancelTask" => {
                    #[allow(non_camel_case_types)]
                    struct CancelTaskSvc<T: Monitor>(pub Arc<T>);
                    impl<
                        T: Monitor,
                    > tonic::server::UnaryService<super::CancelTaskRequest>
                    for CancelTaskSvc<T> {
                        type Response = super::CancelTaskResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CancelTaskRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Monitor>::cancel_task(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CancelTaskSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MonitorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "crankshaft.monitor.Monitor";
    impl<T> tonic::server::NamedService for MonitorServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
